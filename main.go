package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"html/template"
	"log"
	"net/http"

	_ "github.com/go-sql-driver/mysql"
)

type Response struct {
	Status  int    `json:"status"`
	Message string `json:"message"`
	Data    []Product
}

type Product struct {
	id          int
	name        string
	code        string
	category_id int
}

func dbConn() (db *sql.DB) {
	dbDriver := "mysql"
	dbUser := "root"
	dbPass := ""
	dbName := "myshop"
	db, err := sql.Open(dbDriver, dbUser+":"+dbPass+"@/"+dbName)
	if err != nil {
		panic(err.Error())
	}
	return db
}

var tmpl = template.Must(template.ParseGlob("form/*"))

// PrintJSON converts payload to JSON and prints it
func PrintJSON(payload interface{}) {
	response, _ := json.Marshal(payload)
	fmt.Printf("%s\n", response)
}

func Products(w http.ResponseWriter, r *http.Request) {
	fmt.Println("On Index")
	var response Response
	db := dbConn()
	selDB, err := db.Query("SELECT * FROM product ORDER BY id DESC")
	if err != nil {
		panic(err.Error())
	}
	prod := Product{}
	res := []Product{}
	for selDB.Next() {
		var id, category_id int
		var name, code string
		err = selDB.Scan(&id, &name, &code, &category_id)
		if err != nil {
			panic(err.Error())
		}
		prod.id = id
		prod.name = name
		prod.code = code
		prod.category_id = category_id
		res = append(res, prod)
	}

	response.Status = 200
	response.Message = "Success"
	response.Data = res

	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	json.NewEncoder(w).Encode(response)
	fmt.Println(response)

}

func ProductByCategory(w http.ResponseWriter, r *http.Request) {
	fmt.Println("On Index")
	var response Response
	db := dbConn()
	nId := r.URL.Query().Get("id")
	selDB, err := db.Query("SELECT * FROM product where category_id=?", nId)
	if err != nil {
		panic(err.Error())
	}
	prod := Product{}
	res := []Product{}
	for selDB.Next() {
		var id, category_id int
		var name, code string
		err = selDB.Scan(&id, &name, &code, &category_id)
		if err != nil {
			panic(err.Error())
		}
		prod.id = id
		prod.name = name
		prod.code = code
		prod.category_id = category_id
		res = append(res, prod)
	}

	response.Status = 200
	response.Message = "Success"
	response.Data = res

	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	json.NewEncoder(w).Encode(response)
	fmt.Println(response)

}

func ShowProduct(w http.ResponseWriter, r *http.Request) {
	db := dbConn()
	nId := r.URL.Query().Get("id")
	selDB, err := db.Query("SELECT * FROM product WHERE id=?", nId)
	if err != nil {
		panic(err.Error())
	}
	prod := Product{}
	for selDB.Next() {
		var id, category_id int
		var name, code string
		err = selDB.Scan(&id, &name, &code, &category_id)
		if err != nil {
			panic(err.Error())
		}
		prod.id = id
		prod.name = name
		prod.code = code
		prod.category_id = category_id
	}

	tmpl.ExecuteTemplate(w, "Show", prod)
	fmt.Println(prod)
	defer db.Close()
}

func Insert(w http.ResponseWriter, r *http.Request) {
	db := dbConn()
	if r.Method == "POST" {
		name := r.FormValue("name")
		code := r.FormValue("code")
		category_id := r.FormValue("category_id")
		insForm, err := db.Prepare("INSERT INTO product(name, code,category_id) VALUES(?,?,?)")
		if err != nil {
			panic(err.Error())
		}
		insForm.Exec(name, code, category_id)
		log.Println("INSERT: Name: " + name + " | code: " + code + " | category_id: " + category_id)
	}
	defer db.Close()
}

func Update(w http.ResponseWriter, r *http.Request) {
	db := dbConn()
	if r.Method == "POST" {
		name := r.FormValue("name")
		code := r.FormValue("code")
		category_id := r.FormValue("category_id")
		id := r.FormValue("uid")
		insForm, err := db.Prepare("UPDATE product SET name=?, code=?, category_id=? WHERE id=?")
		if err != nil {
			panic(err.Error())
		}
		insForm.Exec(name, code, category_id, id)
		log.Println("UPDATE: Name: " + name + " | Code: " + code + " | Category_id: " + category_id)
	}
	defer db.Close()
}

func Delete(w http.ResponseWriter, r *http.Request) {
	db := dbConn()
	emp := r.URL.Query().Get("id")
	delForm, err := db.Prepare("DELETE FROM product WHERE id=?")
	if err != nil {
		panic(err.Error())
	}
	delForm.Exec(emp)
	log.Println("DELETE")
	defer db.Close()
}

func main() {
	log.Println("Server started on: http://localhost:8080")
	http.HandleFunc("/products", Products)
	http.HandleFunc("/show", ShowProduct)
	http.HandleFunc("/category", ProductByCategory)
	http.HandleFunc("/insert", Insert)
	http.HandleFunc("/update", Update)
	http.HandleFunc("/delete", Delete)
	http.ListenAndServe(":8080", nil)
}
